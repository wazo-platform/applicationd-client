# coding: utf-8

"""
    Wazo applicationd

    Applicationd  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wazo_applicationd_client.api_client import ApiClient
from wazo_applicationd_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ApplicationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def call_answer10_applications_application_uuid_calls_call_id_answer_put(self, application_uuid, call_id, **kwargs):  # noqa: E501
        """Call Answer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_answer10_applications_application_uuid_calls_call_id_answer_put(application_uuid, call_id, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param call_id: (required)
        :type call_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.call_answer10_applications_application_uuid_calls_call_id_answer_put_with_http_info(application_uuid, call_id, **kwargs)  # noqa: E501

    def call_answer10_applications_application_uuid_calls_call_id_answer_put_with_http_info(self, application_uuid, call_id, **kwargs):  # noqa: E501
        """Call Answer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_answer10_applications_application_uuid_calls_call_id_answer_put_with_http_info(application_uuid, call_id, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param call_id: (required)
        :type call_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'application_uuid',
            'call_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_answer10_applications_application_uuid_calls_call_id_answer_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in local_var_params or  # noqa: E501
                                                        local_var_params['application_uuid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `application_uuid` when calling `call_answer10_applications_application_uuid_calls_call_id_answer_put`")  # noqa: E501
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['call_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `call_id` when calling `call_answer10_applications_application_uuid_calls_call_id_answer_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in local_var_params:
            path_params['application_uuid'] = local_var_params['application_uuid']  # noqa: E501
        if 'call_id' in local_var_params:
            path_params['call_id'] = local_var_params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "object",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/1.0/applications/{application_uuid}/calls/{call_id}/answer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def call_hangup10_applications_application_uuid_calls_call_id_delete(self, application_uuid, call_id, **kwargs):  # noqa: E501
        """Call Hangup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_hangup10_applications_application_uuid_calls_call_id_delete(application_uuid, call_id, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param call_id: (required)
        :type call_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.call_hangup10_applications_application_uuid_calls_call_id_delete_with_http_info(application_uuid, call_id, **kwargs)  # noqa: E501

    def call_hangup10_applications_application_uuid_calls_call_id_delete_with_http_info(self, application_uuid, call_id, **kwargs):  # noqa: E501
        """Call Hangup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_hangup10_applications_application_uuid_calls_call_id_delete_with_http_info(application_uuid, call_id, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param call_id: (required)
        :type call_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'application_uuid',
            'call_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_hangup10_applications_application_uuid_calls_call_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in local_var_params or  # noqa: E501
                                                        local_var_params['application_uuid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `application_uuid` when calling `call_hangup10_applications_application_uuid_calls_call_id_delete`")  # noqa: E501
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['call_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `call_id` when calling `call_hangup10_applications_application_uuid_calls_call_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in local_var_params:
            path_params['application_uuid'] = local_var_params['application_uuid']  # noqa: E501
        if 'call_id' in local_var_params:
            path_params['call_id'] = local_var_params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "object",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/1.0/applications/{application_uuid}/calls/{call_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def call_mute_start10_applications_application_uuid_calls_call_id_mute_start_post(self, application_uuid, call_id, **kwargs):  # noqa: E501
        """Call Mute Start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_mute_start10_applications_application_uuid_calls_call_id_mute_start_post(application_uuid, call_id, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param call_id: (required)
        :type call_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.call_mute_start10_applications_application_uuid_calls_call_id_mute_start_post_with_http_info(application_uuid, call_id, **kwargs)  # noqa: E501

    def call_mute_start10_applications_application_uuid_calls_call_id_mute_start_post_with_http_info(self, application_uuid, call_id, **kwargs):  # noqa: E501
        """Call Mute Start  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_mute_start10_applications_application_uuid_calls_call_id_mute_start_post_with_http_info(application_uuid, call_id, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param call_id: (required)
        :type call_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'application_uuid',
            'call_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_mute_start10_applications_application_uuid_calls_call_id_mute_start_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in local_var_params or  # noqa: E501
                                                        local_var_params['application_uuid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `application_uuid` when calling `call_mute_start10_applications_application_uuid_calls_call_id_mute_start_post`")  # noqa: E501
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['call_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `call_id` when calling `call_mute_start10_applications_application_uuid_calls_call_id_mute_start_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in local_var_params:
            path_params['application_uuid'] = local_var_params['application_uuid']  # noqa: E501
        if 'call_id' in local_var_params:
            path_params['call_id'] = local_var_params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "object",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/1.0/applications/{application_uuid}/calls/{call_id}/mute/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def call_mute_stop10_applications_application_uuid_calls_call_id_mute_stop_post(self, application_uuid, call_id, **kwargs):  # noqa: E501
        """Call Mute Stop  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_mute_stop10_applications_application_uuid_calls_call_id_mute_stop_post(application_uuid, call_id, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param call_id: (required)
        :type call_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.call_mute_stop10_applications_application_uuid_calls_call_id_mute_stop_post_with_http_info(application_uuid, call_id, **kwargs)  # noqa: E501

    def call_mute_stop10_applications_application_uuid_calls_call_id_mute_stop_post_with_http_info(self, application_uuid, call_id, **kwargs):  # noqa: E501
        """Call Mute Stop  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.call_mute_stop10_applications_application_uuid_calls_call_id_mute_stop_post_with_http_info(application_uuid, call_id, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param call_id: (required)
        :type call_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'application_uuid',
            'call_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_mute_stop10_applications_application_uuid_calls_call_id_mute_stop_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in local_var_params or  # noqa: E501
                                                        local_var_params['application_uuid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `application_uuid` when calling `call_mute_stop10_applications_application_uuid_calls_call_id_mute_stop_post`")  # noqa: E501
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['call_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `call_id` when calling `call_mute_stop10_applications_application_uuid_calls_call_id_mute_stop_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in local_var_params:
            path_params['application_uuid'] = local_var_params['application_uuid']  # noqa: E501
        if 'call_id' in local_var_params:
            path_params['call_id'] = local_var_params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "object",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/1.0/applications/{application_uuid}/calls/{call_id}/mute/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_node_with_calls10_applications_application_uuid_nodes_node_name_post(self, application_uuid, node_name, request_body, **kwargs):  # noqa: E501
        """Create Node With Calls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_node_with_calls10_applications_application_uuid_nodes_node_name_post(application_uuid, node_name, request_body, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param node_name: (required)
        :type node_name: str
        :param request_body: (required)
        :type request_body: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Node
        """
        kwargs['_return_http_data_only'] = True
        return self.create_node_with_calls10_applications_application_uuid_nodes_node_name_post_with_http_info(application_uuid, node_name, request_body, **kwargs)  # noqa: E501

    def create_node_with_calls10_applications_application_uuid_nodes_node_name_post_with_http_info(self, application_uuid, node_name, request_body, **kwargs):  # noqa: E501
        """Create Node With Calls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_node_with_calls10_applications_application_uuid_nodes_node_name_post_with_http_info(application_uuid, node_name, request_body, async_req=True)
        >>> result = thread.get()

        :param application_uuid: (required)
        :type application_uuid: str
        :param node_name: (required)
        :type node_name: str
        :param request_body: (required)
        :type request_body: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Node, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'application_uuid',
            'node_name',
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_node_with_calls10_applications_application_uuid_nodes_node_name_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in local_var_params or  # noqa: E501
                                                        local_var_params['application_uuid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `application_uuid` when calling `create_node_with_calls10_applications_application_uuid_nodes_node_name_post`")  # noqa: E501
        # verify the required parameter 'node_name' is set
        if self.api_client.client_side_validation and ('node_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['node_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `node_name` when calling `create_node_with_calls10_applications_application_uuid_nodes_node_name_post`")  # noqa: E501
        # verify the required parameter 'request_body' is set
        if self.api_client.client_side_validation and ('request_body' not in local_var_params or  # noqa: E501
                                                        local_var_params['request_body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `request_body` when calling `create_node_with_calls10_applications_application_uuid_nodes_node_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in local_var_params:
            path_params['application_uuid'] = local_var_params['application_uuid']  # noqa: E501
        if 'node_name' in local_var_params:
            path_params['node_name'] = local_var_params['node_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "Node",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/1.0/applications/{application_uuid}/nodes/{node_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def register_application10_applications_application_name_post(self, application_name, **kwargs):  # noqa: E501
        """Register Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_application10_applications_application_name_post(application_name, async_req=True)
        >>> result = thread.get()

        :param application_name: (required)
        :type application_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Application
        """
        kwargs['_return_http_data_only'] = True
        return self.register_application10_applications_application_name_post_with_http_info(application_name, **kwargs)  # noqa: E501

    def register_application10_applications_application_name_post_with_http_info(self, application_name, **kwargs):  # noqa: E501
        """Register Application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_application10_applications_application_name_post_with_http_info(application_name, async_req=True)
        >>> result = thread.get()

        :param application_name: (required)
        :type application_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Application, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'application_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_application10_applications_application_name_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'application_name' is set
        if self.api_client.client_side_validation and ('application_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['application_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `application_name` when calling `register_application10_applications_application_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_name' in local_var_params:
            path_params['application_name'] = local_var_params['application_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "Application",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/1.0/applications/{application_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
